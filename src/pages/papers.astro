---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import papers from '../content/papers.json';

// Get all papers and sort by year (newest first)
const allPapers = papers.sort((a, b) => b.year - a.year);

// Get unique editions for filter buttons
const editions = [...new Set(papers.map(paper => paper.edition))].sort();

// Get unique keywords for filter buttons
const allKeywords = papers.flatMap(paper => paper.keywords || []);
const uniqueKeywords = [...new Set(allKeywords)].slice(0, 5); // Show first 5 keywords
---

<Layout title="Browse Papers - SOLE Archive">
  <Navigation currentPage="papers" />
  
  
  <!-- Papers Grid -->
  <section class="py-16 bg-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Results Header -->
      <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-8 space-y-4 md:space-y-0">
        <div>
          <h2 class="text-2xl font-crimson font-semibold text-primary">All Papers</h2>
          <p class="text-text-secondary">Showing {allPapers.length} papers from {editions.length} ConSOLE editions</p>
        </div>
        <div style="width: 2rem; display: inline-block;"></div>

                 <div class="flex items-center space-x-4">
           <select id="sort-select" class="px-4 py-2 border border-border rounded-lg focus:ring-2 focus:ring-primary-100 focus:border-primary-500 focus:outline-none">
             <option value="date">Sort by: Date</option>
             <option value="title">Sort by: Title</option>
             <option value="author">Sort by: Author</option>
             <option value="edition">Sort by: Edition</option>
           </select>
         </div>
      </div>

             <!-- Papers Grid -->
               <div id="papers-grid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
         {allPapers.map(paper => (
          <div class="card hover:shadow-lg transition-all duration-300 group" style="padding: 2rem; border-radius: 0.75rem;">
            <div class="flex items-start justify-between mb-4">
              <span class="px-3 py-1 bg-accent-100 text-accent-700 text-sm font-medium rounded-full">{paper.edition}</span>
              
            </div>
            <h3 class="text-xl font-crimson font-semibold text-primary mb-3 group-hover:text-primary-700 transition-smooth">
              <a href={`/paper/${paper.slug}`}>{paper.title}</a>
            </h3>
            <p class="text-text-secondary mb-4 line-clamp-3">
              {paper.abstract.length > 150 ? `${paper.abstract.substring(0, 150)}...` : paper.abstract}
            </p>
                         <div class="flex items-center justify-between text-sm text-text-secondary">
               <div class="flex items-center space-x-2">
                 <span><b>
                   {paper.authors.length === 1 
                     ? paper.authors[0] 
                     : paper.authors.length === 2 
                       ? `${paper.authors[0]} & ${paper.authors[1]}`
                       : `${paper.authors[0]} et al.`
                   }
                 </b></span>
               </div>
              <div class="flex items-center space-x-4">
                <span class="flex items-center space-x-1">
                  
                </span>
                <span class="font-mono">{paper.year}</span>
              </div>
            </div>
          </div>
        ))}
      </div>

                     <!-- Pagination -->
                    <div style="height: 3rem;"></div>

        <div>
          <div class="text-sm text-text-secondary text-center md:text-left">
            <span id="pagination-info">Showing 1-{Math.min(12, allPapers.length)} of {allPapers.length} papers</span>
          </div>
          <div style="height: 1rem;"></div>

          <div class="flex items-center justify-center space-x-2" id="pagination-controls">
            <button id="prev-btn" class="px-3 py-2 text-text-secondary hover:text-primary transition-smooth disabled:opacity-50" disabled>
              Previous
            </button>
            <div id="page-numbers" class="flex items-center space-x-2">
              <button class="px-3 py-2 bg-primary text-white rounded-lg">1</button>
            </div>
            <button id="next-btn" class="px-3 py-2 text-text-secondary hover:text-primary transition-smooth">
              Next
            </button>
          </div>
        </div>
         </div>
   </section>
   <!-- Footer -->
  <footer class="bg-primary text-white py-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid md:grid-cols-4 gap-8">
        <!-- Brand Column -->
        <div class="md:col-span-2">
          <div class="flex items-center space-x-3 mb-4">
            <img src="/logo.png" alt="SOLE Archive" class="w-8 h-8 object-contain" loading="eager" style="filter: invert(1);" />
            
            <div>
              <h3 class="text-xl font-crimson font-semibold">SOLE Archive</h3>
              <p class="text-sm text-primary-200 font-mono">ConSOLE Proceedings</p>
            </div>
          </div>
          <p class="text-primary-100 mb-4 max-w-md">
            Archive of the ConSOLE proceedings, from 2000 to 2025.
          </p>
          <div class="flex space-x-4">
            
            <a href="https://www.linkedin.com/company/student-organization-of-linguistics-in-europe/posts/?feedView=all" target="_blank" 
            rel="noopener noreferrer"  class="text-primary-200 hover:text-white transition-smooth">
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
              </svg>
            </a>
          </div>
        </div>

        <!-- Quick Links -->
        <div>
          <h4 class="font-crimson font-semibold mb-4">Quick Links</h4>
          <ul class="space-y-2 text-primary-100">
            <li><a href="/" class="hover:text-white transition-smooth">Home</a></li>
            <li><a href="/papers" class="hover:text-white transition-smooth">Browse Papers</a></li>
            <li><a href="/analytics" class="hover:text-white transition-smooth">Analytics</a></li>
        
          </ul>
        </div>

        <!-- Resources -->
        <div>
          <h4 class="font-crimson font-semibold mb-4">Resources</h4>
          <ul class="space-y-2 text-primary-100">
            <li><a href="https://www.universiteitleiden.nl/en/events/series/sole" target="_blank" 
              rel="noopener noreferrer" class="hover:text-white transition-smooth">About SOLE</a></li>
            
            <li><a href="mailto:sole.leiden@gmail.com" class="hover:text-white transition-smooth">Contact</a></li>
          </ul>
        </div>
      </div>

      <div class="border-t border-primary-700 mt-8 pt-8 flex flex-col md:flex-row justify-between items-center">
        <p class="text-primary-200 text-sm">Â© 2025 SOLE Archive. Website built by <a href="https://tomsgrizzi.github.io/" class="hover:text-white transition-smooth">Tommaso Sgrizzi</a>.</p>
        <div class="flex space-x-6 mt-4 md:mt-0">
          
        </div>
      </div>
    </div>
  </footer>
   </Layout>

 <style>
   /* Override card styling to ensure proper spacing */
   .card {
     padding: 2rem !important;
     border-radius: 0.75rem !important;
     border: 1px solid #e5e7eb !important;
     background: white !important;
     box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06) !important;
     transition: all 0.3s ease-out !important;
   }
   
   .card:hover {
     transform: translateY(-2px) !important;
     box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05) !important;
   }
 </style>

 <script>
   // Pagination variables
   let currentPage = 1;
   const papersPerPage = 12;
   let allPapersElements: Element[] = [];
   let totalPages = 1;
   
   // Initialize pagination
   function initializePagination() {
     const papersGrid = document.getElementById('papers-grid');
     if (!papersGrid) return;
     
     allPapersElements = Array.from(papersGrid.children);
     totalPages = Math.ceil(allPapersElements.length / papersPerPage);
     
     updatePagination();
     showCurrentPage();
   }
   
   // Show papers for current page
   function showCurrentPage() {
     const papersGrid = document.getElementById('papers-grid');
     if (!papersGrid) return;
     
     const startIndex = (currentPage - 1) * papersPerPage;
     const endIndex = startIndex + papersPerPage;
     const papersToShow = allPapersElements.slice(startIndex, endIndex);
     
     papersGrid.innerHTML = '';
     papersToShow.forEach(paper => papersGrid.appendChild(paper));
   }
   
   // Update pagination controls
   function updatePagination() {
     const paginationInfo = document.getElementById('pagination-info');
     const prevBtn = document.getElementById('prev-btn') as HTMLButtonElement;
     const nextBtn = document.getElementById('next-btn') as HTMLButtonElement;
     const pageNumbers = document.getElementById('page-numbers');
     
     if (!paginationInfo || !prevBtn || !nextBtn || !pageNumbers) return;
     
     const startIndex = (currentPage - 1) * papersPerPage + 1;
     const endIndex = Math.min(currentPage * papersPerPage, allPapersElements.length);
     
     // Update info text
     paginationInfo.textContent = `Showing ${startIndex}-${endIndex} of ${allPapersElements.length} papers`;
     
     // Update previous/next buttons
     prevBtn.disabled = currentPage === 1;
     nextBtn.disabled = currentPage === totalPages;
     
           // Update page numbers
      pageNumbers.innerHTML = '';
      
      // Check if we're on mobile (screen width < 768px)
      const isMobile = window.innerWidth < 768;
      const maxVisiblePages = isMobile ? 3 : 5;
      
      let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
      let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
      
      if (endPage - startPage + 1 < maxVisiblePages) {
        startPage = Math.max(1, endPage - maxVisiblePages + 1);
      }
      
      // On mobile, show fewer page numbers and ellipsis
      if (isMobile) {
        // Always show current page and adjacent pages
        for (let i = Math.max(1, currentPage - 1); i <= Math.min(totalPages, currentPage + 1); i++) {
          addPageButton(i);
        }
      } else {
        // Desktop: Add first page and ellipsis if needed
        if (startPage > 1) {
          addPageButton(1);
          if (startPage > 2) {
            const ellipsis = document.createElement('span');
            ellipsis.className = 'px-3 py-2 text-text-secondary';
            ellipsis.textContent = '...';
            pageNumbers.appendChild(ellipsis);
          }
        }
        
        // Add visible page numbers
        for (let i = startPage; i <= endPage; i++) {
          addPageButton(i);
        }
        
        // Add last page and ellipsis if needed
        if (endPage < totalPages) {
          if (endPage < totalPages - 1) {
            const ellipsis = document.createElement('span');
            ellipsis.className = 'px-3 py-2 text-text-secondary';
            ellipsis.textContent = '...';
            pageNumbers.appendChild(ellipsis);
          }
          addPageButton(totalPages);
        }
      }
   }
   
   // Add page button
   function addPageButton(pageNum: number) {
     const pageNumbers = document.getElementById('page-numbers');
     if (!pageNumbers) return;
     
     const button = document.createElement('button');
     button.className = pageNum === currentPage 
       ? 'px-3 py-2 bg-primary text-white rounded-lg' 
       : 'px-3 py-2 text-text-secondary hover:text-primary transition-smooth';
     button.textContent = pageNum.toString();
     
     button.addEventListener('click', () => {
       currentPage = pageNum;
       showCurrentPage();
       updatePagination();
     });
     
     pageNumbers.appendChild(button);
   }
   
   // Sort papers function
   function sortPapers(sortBy: string) {
     const papersGrid = document.getElementById('papers-grid');
     if (!papersGrid) return;
     
     const papers = Array.from(papersGrid.children);
     
     papers.sort((a, b) => {
       let aValue: string | number, bValue: string | number;
       
       switch(sortBy) {
         case 'date':
           // Sort by year (extract from the year span)
           const aYearElement = a.querySelector('.font-mono');
           const bYearElement = b.querySelector('.font-mono');
           if (!aYearElement || !bYearElement) return 0;
           aValue = parseInt(aYearElement.textContent || '0');
           bValue = parseInt(bYearElement.textContent || '0');
           return bValue - aValue; // Newest first
           
         case 'title':
           // Sort by title (extract from the h3 link)
           const aTitleElement = a.querySelector('h3 a');
           const bTitleElement = b.querySelector('h3 a');
           if (!aTitleElement || !bTitleElement) return 0;
           aValue = aTitleElement.textContent?.toLowerCase() || '';
           bValue = bTitleElement.textContent?.toLowerCase() || '';
           return aValue.localeCompare(bValue);
           
         case 'author':
           // Sort by first author (extract from the author span)
           const aAuthorElement = a.querySelector('.flex.items-center.space-x-2 span');
           const bAuthorElement = b.querySelector('.flex.items-center.space-x-2 span');
           if (!aAuthorElement || !bAuthorElement) return 0;
           aValue = aAuthorElement.textContent?.toLowerCase() || '';
           bValue = bAuthorElement.textContent?.toLowerCase() || '';
           return aValue.localeCompare(bValue);
           
         case 'edition':
           // Sort by edition (extract from the edition badge)
           const aEditionElement = a.querySelector('.bg-accent-100');
           const bEditionElement = b.querySelector('.bg-accent-100');
           if (!aEditionElement || !bEditionElement) return 0;
           aValue = aEditionElement.textContent?.toLowerCase() || '';
           bValue = bEditionElement.textContent?.toLowerCase() || '';
           return aValue.localeCompare(bValue);
           
         default:
           return 0;
       }
     });
     
     // Update the papers array and reset pagination
     allPapersElements = papers;
     currentPage = 1;
     totalPages = Math.ceil(allPapersElements.length / papersPerPage);
     
     showCurrentPage();
     updatePagination();
   }
   
       // Add event listeners
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize pagination
      initializePagination();
      
      // Add event listener to sort select
      const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
      if (sortSelect) {
        sortSelect.addEventListener('change', function() {
          sortPapers(this.value);
        });
      }
      
      // Add event listeners for previous/next buttons
      const prevBtn = document.getElementById('prev-btn');
      const nextBtn = document.getElementById('next-btn');
      
      if (prevBtn) {
        prevBtn.addEventListener('click', function() {
          if (currentPage > 1) {
            currentPage--;
            showCurrentPage();
            updatePagination();
          }
        });
      }
      
      if (nextBtn) {
        nextBtn.addEventListener('click', function() {
          if (currentPage < totalPages) {
            currentPage++;
            showCurrentPage();
            updatePagination();
          }
        });
      }
      
      // Update pagination on window resize
      window.addEventListener('resize', function() {
        updatePagination();
      });
    });
 </script> 